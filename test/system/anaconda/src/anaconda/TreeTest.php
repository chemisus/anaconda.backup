<?php

require_once dirname(__FILE__) . '/../../../../../../../../Projects/anaconda/system/anaconda/src/Tree.php';
require_once dirname(__FILE__) . '/../../../../../../../../Projects/anaconda/system/anaconda/src/anaconda/Tree.php';

/**
 * Test class for Tree.
 * Generated by PHPUnit on 2012-07-23 at 23:17:51.
 */
class TreeTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Tree $object
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new \anaconda\Tree(
                new \anaconda\Vector(),
                new \anaconda\Vector(),
                new \anaconda\Vector(),
                new \anaconda\Vector()
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    public function testInitialize1() {
        $node = new stdClass();
        
        self::assertFalse($this->object->has($node));
    }

    public function testAdd() {
        $node = new stdClass();
        
        $this->object->add($node);
        
        self::assertTrue($this->object->has($node));
    }
    
    public function testCount() {
        $n = rand(5, 15);
        
        for ($i = 0; $i < $n; $i++) {
            $this->object->add(new stdClass());
        }

        self::assertEquals($n, $this->object->count());
    }
    
    public function testAncestors() {
        $child = new stdClass();
        
        $parent = new stdClass();
        
        $this->object->add($parent);
        
        $this->object->move($child, $parent);

        self::assertEquals($parent, $this->object->getAncestors($child)->shift());
    }
    
    public function testDescendants() {
        $child = new stdClass();
        
        $parent = new stdClass();
        
        $this->object->add($parent);
        
        $this->object->move($child, $parent);

        self::assertEquals($child, $this->object->getDescendants($parent)->shift());
    }
    
    public function testChildren() {
        $child = new stdClass();
        
        $parent = new stdClass();
        
        $this->object->add($parent);
        
        $this->object->move($child, $parent);

        self::assertEquals($child, $this->object->getChildren($parent)->shift());
    }
    
    public function testParent() {
        $child = new stdClass();
        
        $parent = new stdClass();
        
        $this->object->add($parent);
        
        $this->object->move($child, $parent);
        
        print_r($this->object);
        
        self::assertEquals($parent, $this->object->getParent($child));
    }
}

?>
